import{_ as k,C as r,c as d,o as a,a3 as n,b as e,w as i,a as l,G as h,a4 as p}from"./chunks/framework.D3hQ4SZ3.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"pages/getting-started/getting-started.md","filePath":"pages/getting-started/getting-started.md"}'),g={name:"pages/getting-started/getting-started.md"};function E(o,s,c,y,F,u){const t=r("Mermaid");return a(),d("div",null,[s[2]||(s[2]=n(`<h2 id="what-we-will-be-creating" tabindex="-1">What we will be creating <a class="header-anchor" href="#what-we-will-be-creating" aria-label="Permalink to &quot;What we will be creating&quot;">​</a></h2><p>In this tutorial we will be creating a *<em>vehicle fleet management</em> *starting application written in C# (as the only current languge supported)</p><h2 id="initializing-the-application" tabindex="-1">Initializing the Application <a class="header-anchor" href="#initializing-the-application" aria-label="Permalink to &quot;Initializing the Application&quot;">​</a></h2><p>Once the <strong>mermaid-codegen</strong> tool is installed (as described in the previous step), you can begin by setting up the default configuration within your application.</p><h2 id="folder-structure" tabindex="-1">Folder structure <a class="header-anchor" href="#folder-structure" aria-label="Permalink to &quot;Folder structure&quot;">​</a></h2><p>For this example we will be creating the folder structure as follows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fleet-management/</span></span>
<span class="line"><span>├── definitions/        # (the intermediate code that is generated)</span></span>
<span class="line"><span>│   ├── *.Generated.yml</span></span>
<span class="line"><span>│   └── .yml &lt;--- Custom definitions</span></span>
<span class="line"><span>├── blue-prints/c#      # (the Handlebars templates)</span></span>
<span class="line"><span>│   ├── class.hbs</span></span>
<span class="line"><span>│   └── interface.hbs</span></span>
<span class="line"><span>├── docs/</span></span>
<span class="line"><span>│   └── detailed-design/</span></span>
<span class="line"><span>|       └── fleet-design.md</span></span>
<span class="line"><span>└── src/</span></span>
<span class="line"><span>    └── models/</span></span>
<span class="line"><span>        └── &lt;-- Source code to be generated</span></span></code></pre></div><h2 id="lets-get-started" tabindex="-1">Lets get started <a class="header-anchor" href="#lets-get-started" aria-label="Permalink to &quot;Lets get started&quot;">​</a></h2><h3 id="configuring-the-c-webapi" tabindex="-1">Configuring the C# webapi <a class="header-anchor" href="#configuring-the-c-webapi" aria-label="Permalink to &quot;Configuring the C# webapi&quot;">​</a></h3><p>Create the folder structure manually as described above <strong>navigate to the ./src/</strong> directory and initialize a <strong>dotnet</strong> project</p><p>Run the following command to create the project</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>dotnet new webapi -n fleet-management -o .\\ --use-controllers true</span></span></code></pre></div><p>This should create a scaffolded webapi application.</p><p>If everything went as expected you should be able to run the default application:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>dotnet run fleet-management.csproj</span></span></code></pre></div><h3 id="initializing-mermaid-codegen-app" tabindex="-1">Initializing mermaid-codegen app <a class="header-anchor" href="#initializing-mermaid-codegen-app" aria-label="Permalink to &quot;Initializing mermaid-codegen app&quot;">​</a></h3><p>With the terminal open, navigate to the root directory of fleet-management</p><p>Run the following command</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mermaid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">codegen initialize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l C# </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d .\\blue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prints\\C#</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If your language is not supported out of the box, you can easily initialize it using the C# base and then customize and create your own templates from scratch.</p><p>Please try to contribute the templates to add more funcitionality in the tool.</p></div><ol start="3"><li>Upon execution, the following folders and files will be created:</li></ol><p><strong>blueprints/c#/config.csharp.json</strong></p><p>A set of <a href="https://handlebarsjs.com/" target="_blank" rel="noreferrer">handlebars</a> templates, such as <strong>class.csharp.hbs</strong> etc are created.</p><h3 id="now-lets-start-with-creating-your-first-mermaid-diagram" tabindex="-1">Now lets start with creating your first mermaid diagram <a class="header-anchor" href="#now-lets-start-with-creating-your-first-mermaid-diagram" aria-label="Permalink to &quot;Now lets start with creating your first mermaid diagram&quot;">​</a></h3><p>For this we will start with simple <a href="https://en.wikipedia.org/wiki/Plain_old_CLR_object" target="_blank" rel="noreferrer">POCO</a> classes, describing the entities in the system.</p><ol><li>Create a file <code>docs\\detailed-design\\fleet-management.md</code></li><li>Once created lets start by creating our first model in the document</li></ol>`,26)),(a(),e(p,null,{default:i(()=>[h(t,{id:"mermaid-88",class:"mermaid",graph:"classDiagram%0Anamespace%20Models%20%7B%0A%20%20%20%20class%20Vehicle%20%7B%0A%20%20%20%20%20%20%20%20%3C%3Cclass%3E%3E%0A%20%20%20%20%20%20%20%20%2BString%20Make%0A%20%20%20%20%20%20%20%20%2BString%20Model%0A%20%20%20%20%20%20%20%20%2BString%20Model%0A%20%20%20%20%20%20%20%20%2Bint%20Year%0A%20%20%20%20%20%20%20%20%2BString%20Status%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20Fleet%20%7B%0A%20%20%20%20%20%20%20%20%3C%3Cclass%3E%3E%0A%20%20%20%20%20%20%20%20%2BList~Vehicle~%20Vehicles%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20Driver%20%7B%0A%20%20%20%20%20%20%20%20%3C%3Cclass%3E%3E%0A%20%20%20%20%20%20%20%20%2BString%20Name%0A%20%20%20%20%20%20%20%20%2BString%20LicenseNumber%0A%20%20%20%20%20%20%20%20%2BList~Vehicle~%20AssignedVehicles%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20Maintenance%20%7B%0A%20%20%20%20%20%20%20%20%3C%3Cclass%3E%3E%0A%20%20%20%20%20%20%20%20%2BDate%20ScheduleDate%0A%20%20%20%20%20%20%20%20%2BString%20ServiceType%0A%20%20%20%20%20%20%20%20%2BString%20ServiceCenter%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20Report%20%7B%0A%20%20%20%20%20%20%20%20%3C%3Cclass%3E%3E%0A%20%20%20%20%7D%0A%7D%0A"})]),fallback:i(()=>s[0]||(s[0]=[l(" Loading... ")])),_:1})),s[3]||(s[3]=n('<p>What you should notice is the annotation in the class, forexample, <code>&lt;&lt;class&gt;&gt;</code></p><p>This annotation will map to the relevant hbs template. e.g. class.csharp.hbs</p><p>(hbs) -&gt; It is a handlebars file (csharp) -&gt; For language csharp (class) -&gt; for class annotation</p><ol start="3"><li>Run the first step in the process of converting the mermaid class to generated (yml) files</li></ol><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mermaid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">codegen transform </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i .\\docs\\detailed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">design </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o definitions</span></span></code></pre></div><p>If all is good you will find the following files</p><p>fleet-management/ └── definitions/ # (the intermediate code that is generated) ├── Driver.Generated.yml ├── Fleet.Generated.yml ├── Maintenance.Generated.yml ├── Report.Generated.yml ├── Driver.Generated.yml └── Vehicle.Generated.yml</p><p>These files provide an yml representation of the <code>classes</code>,</p>',8)),(a(),e(p,null,{default:i(()=>[h(t,{id:"mermaid-115",class:"mermaid",graph:"classDiagram%0Anamespace%20Models%20%7B%0A%20%20%20%20class%20Vehicle%20%7B%0A%20%20%20%20%20%20%20%20%3C%3Cclass%3E%3E%0A%20%20%20%20%20%20%20%20%2BString%20Make%0A%20%20%20%20%20%20%20%20%2BString%20Model%0A%20%20%20%20%20%20%20%20%2BString%20Model%0A%20%20%20%20%20%20%20%20%2Bint%20Year%0A%20%20%20%20%20%20%20%20%2BString%20Status%0A%20%20%20%20%7D%0A"})]),fallback:i(()=>s[1]||(s[1]=[l(" Loading... ")])),_:1})),s[4]||(s[4]=n(`<p>would be represented as</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Vehicle</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Models</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">class</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Attributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  Status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">String</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    IsSystemType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Public</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  Year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">int</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    IsSystemType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Public</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  Model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">String</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    IsSystemType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Public</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  Make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">String</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    IsSystemType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Public</span></span></code></pre></div><p>You could now extend the default mermaid classes with application specific fields (Think of max/min range attributes etc.) and add an additional file to the folder, without the Generated postfix to add additional info</p><ol start="4"><li>You can now generate the code from the yml files like this:</li></ol><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mermaid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">codegen generate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i definitions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t blue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prints\\C#</span></span></code></pre></div><p>Once this command is executed, you will see all the files are created in the following location</p><div class="language-tree vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tree</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fleet-management/</span></span>
<span class="line"><span>└── src/Models           # (the intermediate code that is generated)</span></span>
<span class="line"><span>    ├── Driver.Generated.cs</span></span>
<span class="line"><span>    ├── Fleet.Generated.cs</span></span>
<span class="line"><span>    ├── Maintenance.Generated.cs</span></span>
<span class="line"><span>    ├── Report.Generated.cs</span></span>
<span class="line"><span>    ├── Driver.Generated.cs</span></span>
<span class="line"><span>    └── Vehicle.Generated.cs</span></span></code></pre></div><ol start="5"><li>Building the source code</li></ol><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dotnet run fleet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">management.csproj</span></span></code></pre></div><ol start="6"><li>Lets add a minimum and maximum value annotation to the year model</li></ol><p>Before we start lets start up the watch mode, so that it can monitor the changes of the yml and/or mermaid code and update the code accordingly</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mermaid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">codegen watch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m docs\\detailed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">design </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y definitions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.\\src&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">templates blue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prints\\C#</span></span></code></pre></div><p>With this running in the background lets check a few things:</p><p>Please open the following file</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class.csharp.hbs</span></span></code></pre></div><p>You would notice that there is already template support for attribute annotations, this can be extended to cater for your needs.</p><div class="language-handlebars vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">handlebars</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#each</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> Attributes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    {{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> this.Annotations.Required</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    {{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> this.Annotations.Required.AllowEmptyStrings</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Required(AllowEmptyStrings = true)]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Required]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    {{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    {{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> this.Annotations.MaxLength</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [MaxLength(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">this.Annotations.MaxLength.Length</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ErrorMessage=&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">this.Annotations.MaxLength.ErrorMessage</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;)]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    {{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    {{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> this.Annotations.MinLength</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [MinLength(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">this.Annotations.MinLength.Length</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ErrorMessage=&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">this.Annotations.MinLength.ErrorMessage</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;)]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    {{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    {{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> this.Annotations.Range</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [Range(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">this.Annotations.Range.Min</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">this.Annotations.Range.Max</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> this.Annotations.Range.ErrorMessage</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ErrorMessage = &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">this.Annotations.Range.ErrorMessage</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    {{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    public </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">this.Type</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> {{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">@key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { get; set; }</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> this.DefaultValue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">isEq</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> this.DefaultValue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new()</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}{{{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">this.DefaultValue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}}{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/each</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span></code></pre></div><p>Please also keep an eye on the <em>Vehicle.Generated.cs</em> file as we will add annotations.</p><p>Now you&#39;re first instinct would be to adapt the mermaid class diagram, however, there is no default flag for these annotations in its syntax, so lets copy the <em>Vehicle.Generated.yml</em> and rename to <em>Vehicle.yml</em> and remove its contents and replace it with</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Vehicle</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Usings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">System.ComponentModel.DataAnnotations</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">class</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Attributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  Year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    Annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      MaxLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        Length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2100</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        ErrorMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Year must be less than 2100&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      MinLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        Length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1900</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        ErrorMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Year must be greater than 1900&quot;</span></span></code></pre></div><p>The above yml code will then result in the following <em>DataAnnotations</em> in C#</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Collections</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Generic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Models</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> partial</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vehicle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MaxLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ErrorMessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Year must be less than 2100&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MinLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1900</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ErrorMessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Year must be greater than 1900&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,22))])}const A=k(g,[["render",E]]);export{m as __pageData,A as default};
