import{_ as a,c as i,o as e,a3 as t}from"./chunks/framework.D3hQ4SZ3.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/getting-started/language-files-explained.md","filePath":"pages/getting-started/language-files-explained.md"}'),n={name:"pages/getting-started/language-files-explained.md"};function l(h,s,p,r,o,d){return e(),i("div",null,s[0]||(s[0]=[t(`<h3 id="what-does-these-files-mean" tabindex="-1">What does these files mean? <a class="header-anchor" href="#what-does-these-files-mean" aria-label="Permalink to &quot;What does these files mean?&quot;">​</a></h3><h4 id="language" tabindex="-1">Language <a class="header-anchor" href="#language" aria-label="Permalink to &quot;Language&quot;">​</a></h4><p>The <code>language</code> option refers to the language <a href="https://handlebarsjs.com/" target="_blank" rel="noreferrer">handlebars</a> templates are defined.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You can also support multiple languages by providing the base folder path.</p></div><h4 id="generateddirectory" tabindex="-1">GeneratedDirectory <a class="header-anchor" href="#generateddirectory" aria-label="Permalink to &quot;GeneratedDirectory&quot;">​</a></h4><p>This generated directory refers to the directory where the code is generated. In this example it will always start by the src/ directory as a starting point.</p><h4 id="ymldirectory" tabindex="-1">YmlDirectory <a class="header-anchor" href="#ymldirectory" aria-label="Permalink to &quot;YmlDirectory&quot;">​</a></h4><p>The YML Directory refers to the intermediate yml code that will be used for code generation. It uses the mermaid class diagrams with the handlebars files to generate some code.</p><h3 id="now-for-the-c-config-csharp-json-file" tabindex="-1">Now for the <code>c#\\config.csharp.json</code> file <a class="header-anchor" href="#now-for-the-c-config-csharp-json-file" aria-label="Permalink to &quot;Now for the \`c#\\config.csharp.json\` file&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;language&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CSharp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;extension&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;mappings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Scope&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Public&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;public&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Private&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;private&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Protected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;protected&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;String&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;REGEX:~(.*)~&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;$1&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The mappings maps the mermaid types and scope to a language specific terminology.</p><h4 id="extension" tabindex="-1">Extension <a class="header-anchor" href="#extension" aria-label="Permalink to &quot;Extension&quot;">​</a></h4><p>The resulting output file extension e.g. <code>PLACEHOLDER.Generated.cs</code></p><h4 id="mappings" tabindex="-1">Mappings <a class="header-anchor" href="#mappings" aria-label="Permalink to &quot;Mappings&quot;">​</a></h4><p>Not all languages use the same variable for the same datatype e.g. <code>Number</code> in Typescript, <code>int</code> in C# You can also create your own REGEX replace for more complex situations.</p><p>This functionality makes it possible to override the properties defined in the YML files for the languages specific types. The elements under the mappings can be extended with any property within the transformed YML files</p>`,16)]))}const g=a(n,[["render",l]]);export{c as __pageData,g as default};
