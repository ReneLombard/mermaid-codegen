import{_ as d,C as k,c as o,o as n,a3 as l,b as p,j as a,w as e,a as i,G as h,a4 as r}from"./chunks/framework.D3hQ4SZ3.js";const v=JSON.parse('{"title":"Overview","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"pages/overview.md","filePath":"pages/overview.md"}'),c={name:"pages/overview.md"};function E(g,s,y,m,u,A){const t=k("Mermaid");return n(),o("div",null,[s[2]||(s[2]=l('<h1 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>The Mermaid to code generator tool provides a middle ground between your source code and the Mermaid <a href="https://mermaid.js.org/syntax/classDiagram.html" target="_blank" rel="noreferrer">class</a> diagrams.</p><h2 id="documentation-first-approach" tabindex="-1">Documentation First Approach <a class="header-anchor" href="#documentation-first-approach" aria-label="Permalink to &quot;Documentation First Approach&quot;">​</a></h2><p>mermaid-to-code embraces a documentation-first approach, by creating visual diagrams and documentation before generating code.</p><p>This approach ensures that the design and architecture are well-documented and agreed upon before implementation begins. By converting these diagrams into machine-readable configurations and then into source code, mermaid-to-code helps maintain consistency between documentation and implementation.</p><h2 id="why-the-yml-middleware" tabindex="-1">Why the YML middleware <a class="header-anchor" href="#why-the-yml-middleware" aria-label="Permalink to &quot;Why the YML middleware&quot;">​</a></h2><p>The mermaid class diagrams are quite limited to the type of data that you can enter within the diagram. It gives a great overview of the classes and the interactions surrounding them. However, in most cases you might want to give more information in the actual code base. Forexample, code comments etc.</p><p>The intermediatary YML structure provides a means to extend the the classdiagram to provide more information on which you can add more information.</p><h2 id="flow-explained" tabindex="-1">Flow Explained <a class="header-anchor" href="#flow-explained" aria-label="Permalink to &quot;Flow Explained&quot;">​</a></h2>',10)),(n(),p(r,null,{default:e(()=>[h(t,{id:"mermaid-30",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20participant%20Developer%0A%20%20%20%20participant%20CodeGenerator%0A%0A%20%20%20%20Developer-%3E%3ECodeGenerator%3A%20initialize%20--language%20csharp%20--directory%20.%2Fnew-project%0A%20%20%20%20CodeGenerator--%3E%3EDeveloper%3A%20Project%20initialized%20with%20the%20default%20scaffolding%0A%0A%20%20%20%20Developer-%3E%3ECodeGenerator%3A%20transform%20--input%20.%2Fdiagrams%20--output%20.%2Fyaml%0A%20%20%20%20CodeGenerator--%3E%3EDeveloper%3A%20YAML%20files%20generated%0A%0A%20%20%20%20Developer-%3E%3ECodeGenerator%3A%20generate%20--input%20.%2Fconfig.yaml%20--output%20.%2Fsrc%0A%20%20%20%20CodeGenerator--%3E%3EDeveloper%3A%20Source%20code%20generated%0A"})]),fallback:e(()=>s[0]||(s[0]=[i(" Loading... ")])),_:1})),s[3]||(s[3]=a("h3",{id:"intializing-a-project",tabindex:"-1"},[i("Intializing a project "),a("a",{class:"header-anchor",href:"#intializing-a-project","aria-label":'Permalink to "Intializing a project"'},"​")],-1)),s[4]||(s[4]=a("p",null,[i("The initialize creates all the default scaffolding required to get you up and running with the "),a("code",null,"mermaid-to-code"),i(" tool. You can specify the language that you would like to provide the default templates for. These templates can be extended for you specific language requirements. You also potentially use it to generate documents rather then just code, but that is up to you.")],-1)),s[5]||(s[5]=a("h3",{id:"explaining-by-example",tabindex:"-1"},[i("Explaining by example "),a("a",{class:"header-anchor",href:"#explaining-by-example","aria-label":'Permalink to "Explaining by example"'},"​")],-1)),s[6]||(s[6]=a("p",null,"Suppose you have the following mermaid class diagram",-1)),(n(),p(r,null,{default:e(()=>[h(t,{id:"mermaid-43",class:"mermaid",graph:"classDiagram%0A%20%20%20%20namespace%20VehicleManagement%20%7B%0A%20%20%20%20class%20MaintenanceService%20%7B%0A%20%20%20%20%20%20%20%20%3C%3CClass%3E%3E%0A%20%20%20%20%20%20%20%20%2Bvoid%20executeService()%0A%20%20%20%20%7D%0A%20%20%20%20class%20InsurancePolicy%20%7B%0A%20%20%20%20%20%20%20%20%3C%3CClass%3E%3E%0A%20%20%20%20%20%20%20%20%2BString%20policyId%0A%20%20%20%20%20%20%20%20%2Bvoid%20coverVehicle(Car%20car)%0A%20%20%20%20%7D%0A%20%20%20%20%7D%0A"})]),fallback:e(()=>s[1]||(s[1]=[i(" Loading... ")])),_:1})),s[7]||(s[7]=l(`<p>When running the <code>npx mermaid-to-code transform</code> command you convert this classdiagram to 2 seperate yml files:</p><p><code>MaintenanceService.Generated.yml</code></p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MaintenanceService</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VehicleManagement</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Class</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  executeService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ReturnType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">void</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Public</span></span></code></pre></div><p>and <code>InsurancePolicy.Generated.yml</code></p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">InsurancePolicy</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VehicleManagement</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Class</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Attributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  policyId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">String</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    IsSystemType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!bool</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Public</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  coverVehicle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ReturnType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">void</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Public</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    Parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">car</span></span></code></pre></div><p>You could potentially extend the yml by providing an additional custom yml file <code>InsurancePolicy.yml</code> with the additional field that you want to be used in your handlebars template</p><p>e.g.</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">InsurancePolicy</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Class</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  coverVehicle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    AuthorizedUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Manager</span></span></code></pre></div><p>When running the <code>npx mermaid-to-code</code> tool it will merge these two yml fields for more information.</p><p>As part of the tool initialization it created default handlebars templates per language for example</p><p><code>class.csharp.hbs</code></p><p>The class corresponds to the <code>type</code> in the yml and the <code>&lt;&lt;Class&gt;&gt;</code> tag in the classdiagram</p><p>When the <code>npx mermaid-to-code</code> generate command is executed it will map the annotation with the hbs file.</p><p>forexample if you have the following handlebars template <code>class.csharp.hbs</code></p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Name: {{Name}}</span></span>
<span class="line"><span>Type: {{Type}}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Attributes:</span></span>
<span class="line"><span>{{#each Attributes}}</span></span>
<span class="line"><span>  - {{@key}}:</span></span>
<span class="line"><span>      Type: {{this.Type}}</span></span>
<span class="line"><span>      Scope: {{this.Scope}}</span></span>
<span class="line"><span>{{/each}}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Methods:</span></span>
<span class="line"><span>{{#each Methods}}</span></span>
<span class="line"><span>  - {{@key}}:</span></span>
<span class="line"><span>      ReturnType: {{this.ReturnType}}</span></span>
<span class="line"><span>      Scope: {{this.Scope}}</span></span>
<span class="line"><span>      AuthorizedUser: {{this.AuthorizedUser}}</span></span>
<span class="line"><span>{{/each}}</span></span></code></pre></div><p>When executing the commands for generate it would generate two resulting files. Obviously this is not a class diagram but it is just simply to illustrate the concept</p><p><code>InsurancePolicy.Generated.cs</code></p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">InsurancePolicy</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Class</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Attributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">policyId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">string</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">public</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">coverVehicle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      ReturnType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">void</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Public</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      AuthorizedUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Manager</span></span></code></pre></div><p><code>MaintenanceService.Generated.cs</code></p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MaintenanceService</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Class</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Attributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">executeService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      ReturnType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">void</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">public</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      AuthorizedUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div>`,20))])}const b=d(c,[["render",E]]);export{v as __pageData,b as default};
